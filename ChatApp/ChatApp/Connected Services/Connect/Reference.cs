//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatApp.Connect {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Connect.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllOtherUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAllOtherUser(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllOtherUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllOtherUserAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetMessageForUser(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMessageForUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMessageForUserAsync(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckNewMessageForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckNewMessageForUser(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckNewMessageForUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckNewMessageForUserAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNewMessageForNotif", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetNewMessageForNotif(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNewMessageForNotif", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNewMessageForNotifAsync(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendMessageForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SendMessageForUser(string message_txt, int send_from_user_id, int send_to_user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendMessageForUser", ReplyAction="*")]
        System.Threading.Tasks.Task SendMessageForUserAsync(string message_txt, int send_from_user_id, int send_to_user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckUser(string user_name, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckUserAsync(string user_name, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoginUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int LoginUser(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoginUser", ReplyAction="*")]
        System.Threading.Tasks.Task<int> LoginUserAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNewMessageForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetNewMessageForUser(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNewMessageForUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNewMessageForUserAsync(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogOutUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int LogOutUser(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogOutUser", ReplyAction="*")]
        System.Threading.Tasks.Task<int> LogOutUserAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOnline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckOnline(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckOnline", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckOnlineAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckStatus(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStatusAsync(int from_user, int to_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EnterRemoting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int EnterRemoting(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EnterRemoting", ReplyAction="*")]
        System.Threading.Tasks.Task<int> EnterRemotingAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExitRemoting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int ExitRemoting(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExitRemoting", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ExitRemotingAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOnlineRemotingUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetOnlineRemotingUser(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOnlineRemotingUser", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOnlineRemotingUserAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditUserName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int EditUserName(int user_id, string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditUserName", ReplyAction="*")]
        System.Threading.Tasks.Task<int> EditUserNameAsync(int user_id, string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditUserAbout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int EditUserAbout(int user_id, string user_about);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditUserAbout", ReplyAction="*")]
        System.Threading.Tasks.Task<int> EditUserAboutAsync(int user_id, string user_about);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CreateUser(string user_name, string user_phone, string user_about);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateUser", ReplyAction="*")]
        System.Threading.Tasks.Task CreateUserAsync(string user_name, string user_phone, string user_about);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetUserId(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUserIdAsync(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckIfThereIsContactBetweenThisUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckIfThereIsContactBetweenThisUsers(int user_id, int chatting_user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckIfThereIsContactBetweenThisUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckIfThereIsContactBetweenThisUsersAsync(int user_id, int chatting_user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetUserData(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUserDataAsync(int user_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : ChatApp.Connect.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<ChatApp.Connect.WebService1Soap>, ChatApp.Connect.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetAllOtherUser(int user_id) {
            return base.Channel.GetAllOtherUser(user_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllOtherUserAsync(int user_id) {
            return base.Channel.GetAllOtherUserAsync(user_id);
        }
        
        public System.Data.DataSet GetMessageForUser(int from_user, int to_user) {
            return base.Channel.GetMessageForUser(from_user, to_user);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMessageForUserAsync(int from_user, int to_user) {
            return base.Channel.GetMessageForUserAsync(from_user, to_user);
        }
        
        public System.Data.DataSet CheckNewMessageForUser(int user_id) {
            return base.Channel.CheckNewMessageForUser(user_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckNewMessageForUserAsync(int user_id) {
            return base.Channel.CheckNewMessageForUserAsync(user_id);
        }
        
        public System.Data.DataSet GetNewMessageForNotif(int from_user, int to_user) {
            return base.Channel.GetNewMessageForNotif(from_user, to_user);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNewMessageForNotifAsync(int from_user, int to_user) {
            return base.Channel.GetNewMessageForNotifAsync(from_user, to_user);
        }
        
        public void SendMessageForUser(string message_txt, int send_from_user_id, int send_to_user_id) {
            base.Channel.SendMessageForUser(message_txt, send_from_user_id, send_to_user_id);
        }
        
        public System.Threading.Tasks.Task SendMessageForUserAsync(string message_txt, int send_from_user_id, int send_to_user_id) {
            return base.Channel.SendMessageForUserAsync(message_txt, send_from_user_id, send_to_user_id);
        }
        
        public System.Data.DataSet CheckUser(string user_name, string phone) {
            return base.Channel.CheckUser(user_name, phone);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckUserAsync(string user_name, string phone) {
            return base.Channel.CheckUserAsync(user_name, phone);
        }
        
        public int LoginUser(int user_id) {
            return base.Channel.LoginUser(user_id);
        }
        
        public System.Threading.Tasks.Task<int> LoginUserAsync(int user_id) {
            return base.Channel.LoginUserAsync(user_id);
        }
        
        public System.Data.DataSet GetNewMessageForUser(int from_user, int to_user) {
            return base.Channel.GetNewMessageForUser(from_user, to_user);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNewMessageForUserAsync(int from_user, int to_user) {
            return base.Channel.GetNewMessageForUserAsync(from_user, to_user);
        }
        
        public int LogOutUser(int user_id) {
            return base.Channel.LogOutUser(user_id);
        }
        
        public System.Threading.Tasks.Task<int> LogOutUserAsync(int user_id) {
            return base.Channel.LogOutUserAsync(user_id);
        }
        
        public System.Data.DataSet CheckOnline(int user_id) {
            return base.Channel.CheckOnline(user_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckOnlineAsync(int user_id) {
            return base.Channel.CheckOnlineAsync(user_id);
        }
        
        public System.Data.DataSet CheckStatus(int from_user, int to_user) {
            return base.Channel.CheckStatus(from_user, to_user);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStatusAsync(int from_user, int to_user) {
            return base.Channel.CheckStatusAsync(from_user, to_user);
        }
        
        public int EnterRemoting(int user_id) {
            return base.Channel.EnterRemoting(user_id);
        }
        
        public System.Threading.Tasks.Task<int> EnterRemotingAsync(int user_id) {
            return base.Channel.EnterRemotingAsync(user_id);
        }
        
        public int ExitRemoting(int user_id) {
            return base.Channel.ExitRemoting(user_id);
        }
        
        public System.Threading.Tasks.Task<int> ExitRemotingAsync(int user_id) {
            return base.Channel.ExitRemotingAsync(user_id);
        }
        
        public System.Data.DataSet GetOnlineRemotingUser(int user_id) {
            return base.Channel.GetOnlineRemotingUser(user_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOnlineRemotingUserAsync(int user_id) {
            return base.Channel.GetOnlineRemotingUserAsync(user_id);
        }
        
        public int EditUserName(int user_id, string user_name) {
            return base.Channel.EditUserName(user_id, user_name);
        }
        
        public System.Threading.Tasks.Task<int> EditUserNameAsync(int user_id, string user_name) {
            return base.Channel.EditUserNameAsync(user_id, user_name);
        }
        
        public int EditUserAbout(int user_id, string user_about) {
            return base.Channel.EditUserAbout(user_id, user_about);
        }
        
        public System.Threading.Tasks.Task<int> EditUserAboutAsync(int user_id, string user_about) {
            return base.Channel.EditUserAboutAsync(user_id, user_about);
        }
        
        public void CreateUser(string user_name, string user_phone, string user_about) {
            base.Channel.CreateUser(user_name, user_phone, user_about);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(string user_name, string user_phone, string user_about) {
            return base.Channel.CreateUserAsync(user_name, user_phone, user_about);
        }
        
        public System.Data.DataSet GetUserId(string user_name) {
            return base.Channel.GetUserId(user_name);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUserIdAsync(string user_name) {
            return base.Channel.GetUserIdAsync(user_name);
        }
        
        public System.Data.DataSet CheckIfThereIsContactBetweenThisUsers(int user_id, int chatting_user_id) {
            return base.Channel.CheckIfThereIsContactBetweenThisUsers(user_id, chatting_user_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckIfThereIsContactBetweenThisUsersAsync(int user_id, int chatting_user_id) {
            return base.Channel.CheckIfThereIsContactBetweenThisUsersAsync(user_id, chatting_user_id);
        }
        
        public System.Data.DataSet GetUserData(int user_id) {
            return base.Channel.GetUserData(user_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUserDataAsync(int user_id) {
            return base.Channel.GetUserDataAsync(user_id);
        }
    }
}
